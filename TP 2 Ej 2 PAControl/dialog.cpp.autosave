#include "dialog.h"
#include "ui_dialog.h"


void Dialog::connected(){
  ui->list->addItem("Conectado");

}
void Dialog::disconnected(){
  ui->list->addItem("Desconectado");
}
void Dialog::error(const QMQTT::ClientError error){
  ui->list->addItem("Error: " + QString::number(error));
}
void Dialog::subscribed(const QString& topic, const quint8 qos){
  ui->list->addItem("Subscripto: " + topic + "( Qos: " + QString::number(qos) + ")");
}
void Dialog::unsubscribed(const QString& topic){
 ui->list->addItem("Unsubscripto: " + topic);
}
void Dialog::published(const QMQTT::Message& message, quint16 msgid){
 ui->list->addItem("Publicado:" + message.topic() + ":" + message.payload() + "MsgId: " +QString::number(msgid));
}
void Dialog::pingresp(){

}
void Dialog::received(const Message &message){
  Message msg;
  if(message.topic() == "/PRUEBA/TOPICO"){
      ui->list->addItem(message.payload());
      ui->la_resul->setText(QString(message.payload()));
   }
  else
    ui->list->addItem("Recibido - TÃ³pico: " + message.topic() + " Message:" + message.payload());

}


Dialog::Dialog(QWidget *parent)
    : QDialog(parent)
    , ui(new Ui::Dialog)
{
    ui->setupUi(this);
    connect(&cliente2, SIGNAL(connected()), this, SLOT(connected()));
    connect(&cliente2, SIGNAL(disconnected()), this, SLOT(disconnected()));
    connect(&cliente2, SIGNAL(error(const QMQTT::ClientError)), this, SLOT(error(const QMQTT::ClientError)));
    connect(&cliente2, SIGNAL(subscribed(const QString&, const quint8)), this, SLOT(subscribed(const QString&, const quint8)));
    connect(&cliente2, SIGNAL(unsubscribed(const QString&)), this, SLOT(unsubscribed(const QString&)));

    connect(&cliente2, SIGNAL(published(const QMQTT::Message&, quint16 )), this, SLOT(published(const QMQTT::Message&, quint16 )));
    connect(&cliente2, SIGNAL(pingresp()), this, SLOT(pingresp()));
    connect(&cliente2, SIGNAL(received(const QMQTT::Message&)), this, SLOT(received(const QMQTT::Message&)));
    
  
    
    
}

Dialog::~Dialog()
{
    delete ui;
}


void Dialog::on_btn_connect_clicked()
{
    ui->list->clear();
    cliente2.setHostName(ui->le_servidor->text());
    if((ui->le_servidor->text().length() > 0) && (ui->le_clave->text().length() > 0)){
        cliente2.setUsername(ui->le_servidor->text());
        cliente2.setPassword(ui->le_clave->text().toLatin1());
      }
    cliente2.setPort(ui->le_puerto->text().toInt());
    cliente2.connectToHost();
    
    QString get = "getId";
    QMQTT ::Message mensaje;
    mensaje.setTopic("getId");
    mensaje.setPayload(get.toLatin1());
    cliente2.publish(mensaje);
    
}


void Dialog::on_btn_subs_clicked()
{
    cliente2.subscribe(ui->le_topico->text());
}

void Dialog::on_btn_desconectar_clicked()
{
    if(cliente2.isConnectedToHost()){
       cliente2.disconnectFromHost();
      }
    ui->list->clear();
}


void Dialog::on_btn_led_on_clicked()
{
    
}
